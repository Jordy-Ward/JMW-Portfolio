# Production configuration - uses environment variables
# All values come from Railway environment variables

# Database Configuration - from environment variables
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Settings - optimized for Railway PostgreSQL
spring.datasource.hikari.connection-timeout=${CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.maximum-pool-size=${MAX_POOL_SIZE:5}
spring.datasource.hikari.minimum-idle=${MIN_IDLE:2}
spring.datasource.hikari.idle-timeout=${IDLE_TIMEOUT:300000}
spring.datasource.hikari.max-lifetime=${MAX_LIFETIME:1200000}

# Security - disable H2 console in production
spring.h2.console.enabled=${H2_CONSOLE_ENABLED:false}

# JPA/Hibernate Configuration - optimized for cloud deployment
spring.jpa.database-platform=${JPA_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:update}
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Cloud optimizations - prevent connection pool exhaustion
spring.jpa.open-in-view=${OPEN_IN_VIEW:false}
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# Transaction Management - fix autoCommit issues
spring.jpa.properties.hibernate.connection.autocommit=false
spring.datasource.hikari.auto-commit=false

# CORS - configurable frontend URL
spring.web.cors.allowed-origins=${FRONTEND_URL:http://localhost:3000}